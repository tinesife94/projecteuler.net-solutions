"""Python code to solve problem 2 on the projecteuler.net website, available
at:

https://projecteuler.net/problem=2

For your convinience:
----------------------------------------------------------------------------
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.
----------------------------------------------------------------------------
Usage:

python solution002_even_fibonaci_numbers.py [limit]

Examples:

python solution002_even_fibonaci_numbers.py 4000000

python solution002_even_fibonaci_numbers.py
"""

def fibonacci_numbers_below_lim(lim: int) -> []:
    """Function to obtain all Fibonacci numbers below the limit.

    >>> fibonacci_numbers_below_lim(10)
    [0, 1, 1, 2, 3, 5, 8]
    """
    numbers = []
    term_a, term_b = 0, 1
    while term_a < lim:
        numbers.append(term_a)
        term_a, term_b = term_b, term_a + term_b
    return numbers

def even_valued_fibonacci_terms(fibonacci_seq : []) -> []:
    """Returns even numbers from the Fibonacci sequence.

    >>> even_valued_fibonacci_terms([0, 1, 1, 2, 3, 5, 8])
    [0, 2, 8]
    """
    return fibonacci_seq[0::3]

def sum_even_valued_terms_of_fibonacci_below_lim(lim) -> int:
    """Sums all even values (below lim) of the Fibonacci sequence.

    >>> sum_even_valued_terms_of_fibonacci_below_lim(100)
    44
    """
    return sum(even_valued_fibonacci_terms(fibonacci_numbers_below_lim(lim)))

def _solution(argv : []) -> None:
    if len(argv) == 1:
        lim = argv[0]
    else:
        lim = 4_000_000
    print(sum_even_valued_terms_of_fibonacci_below_lim(lim))

if __name__ == "__main__":
    import sys
    import doctest
    doctest.testmod()
    _solution([int(num) for num in sys.argv if num.isdigit()])
